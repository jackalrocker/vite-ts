""""""
directive @auth(add: AuthRule, delete: AuthRule, password: AuthRule, query: AuthRule, update: AuthRule) on INTERFACE | OBJECT

""""""
directive @cacheControl(maxAge: Int!) on QUERY

""""""
directive @cascade(fields: [String]) on FIELD

""""""
directive @custom(dql: String, http: CustomHTTP) on FIELD_DEFINITION

""""""
directive @dgraph(pred: String, type: String) on FIELD_DEFINITION | INTERFACE | OBJECT

""""""
directive @generate(mutation: GenerateMutationParams, query: GenerateQueryParams, subscription: Boolean) on INTERFACE | OBJECT

""""""
directive @hasInverse(field: String!) on FIELD_DEFINITION

""""""
directive @id(interface: Boolean) on FIELD_DEFINITION

""""""
directive @lambda on FIELD_DEFINITION

""""""
directive @lambdaOnMutate(add: Boolean, delete: Boolean, update: Boolean) on INTERFACE | OBJECT

""""""
directive @remote on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | UNION

""""""
directive @remoteResponse(name: String) on FIELD_DEFINITION

""""""
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION

""""""
directive @secret(field: String!, pred: String) on INTERFACE | OBJECT

""""""
directive @withSubscription on FIELD_DEFINITION | INTERFACE | OBJECT

""""""
input AddAppleInput {
  """"""
  color: String!

  """"""
  isMortal: Boolean!

  """"""
  name: String!
}

""""""
type AddApplePayload {
  """"""
  apple(filter: AppleFilter, first: Int, offset: Int, order: AppleOrder): [Apple]

  """"""
  numUids: Int
}

""""""
input AddPearInput {
  """"""
  name: String!

  """"""
  weight: Int!
}

""""""
type AddPearPayload {
  """"""
  numUids: Int

  """"""
  pear(filter: PearFilter, first: Int, offset: Int, order: PearOrder): [Pear]
}

""""""
type Apple implements Edible & Fruit {
  """"""
  color: String!

  """"""
  isMortal: Boolean!

  """"""
  name: String!
}

""""""
type AppleAggregateResult {
  """"""
  colorMax: String

  """"""
  colorMin: String

  """"""
  count: Int

  """"""
  nameMax: String

  """"""
  nameMin: String
}

""""""
input AppleFilter {
  """"""
  and: [AppleFilter]

  """"""
  has: [AppleHasFilter]

  """"""
  not: AppleFilter

  """"""
  or: [AppleFilter]
}

""""""
enum AppleHasFilter {
  """"""
  color

  """"""
  isMortal

  """"""
  name
}

""""""
input AppleOrder {
  """"""
  asc: AppleOrderable

  """"""
  desc: AppleOrderable

  """"""
  then: AppleOrder
}

""""""
enum AppleOrderable {
  """"""
  color

  """"""
  name
}

""""""
input ApplePatch {
  """"""
  color: String

  """"""
  isMortal: Boolean

  """"""
  name: String
}

""""""
input AppleRef {
  """"""
  color: String

  """"""
  isMortal: Boolean

  """"""
  name: String
}

""""""
input AuthRule {
  """"""
  and: [AuthRule]

  """"""
  not: AuthRule

  """"""
  or: [AuthRule]

  """"""
  rule: String
}

""""""
input ContainsFilter {
  """"""
  point: PointRef

  """"""
  polygon: PolygonRef
}

""""""
input CustomHTTP {
  """"""
  body: String

  """"""
  forwardHeaders: [String!]

  """"""
  graphql: String

  """"""
  introspectionHeaders: [String!]

  """"""
  method: HTTPMethod!

  """"""
  mode: Mode

  """"""
  secretHeaders: [String!]

  """"""
  skipIntrospection: Boolean

  """"""
  url: String!
}

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 mins 50.52 secs after the 23rd hour of Apr 12th 1985 in UTC.
"""
scalar DateTime

""""""
input DateTimeFilter {
  """"""
  between: DateTimeRange

  """"""
  eq: DateTime

  """"""
  ge: DateTime

  """"""
  gt: DateTime

  """"""
  in: [DateTime]

  """"""
  le: DateTime

  """"""
  lt: DateTime
}

""""""
input DateTimeRange {
  """"""
  max: DateTime!

  """"""
  min: DateTime!
}

""""""
type DeleteApplePayload {
  """"""
  apple(filter: AppleFilter, first: Int, offset: Int, order: AppleOrder): [Apple]

  """"""
  msg: String

  """"""
  numUids: Int
}

""""""
type DeleteEdiblePayload {
  """"""
  edible(filter: EdibleFilter, first: Int, offset: Int): [Edible]

  """"""
  msg: String

  """"""
  numUids: Int
}

""""""
type DeleteFruitPayload {
  """"""
  fruit(filter: FruitFilter, first: Int, offset: Int, order: FruitOrder): [Fruit]

  """"""
  msg: String

  """"""
  numUids: Int
}

""""""
type DeletePearPayload {
  """"""
  msg: String

  """"""
  numUids: Int

  """"""
  pear(filter: PearFilter, first: Int, offset: Int, order: PearOrder): [Pear]
}

""""""
enum DgraphIndex {
  """"""
  bool

  """"""
  day

  """"""
  exact

  """"""
  float

  """"""
  fulltext

  """"""
  geo

  """"""
  hash

  """"""
  hour

  """"""
  int

  """"""
  int64

  """"""
  month

  """"""
  regexp

  """"""
  term

  """"""
  trigram

  """"""
  year
}

""""""
interface Edible {
  """"""
  isMortal: Boolean!
}

""""""
type EdibleAggregateResult {
  """"""
  count: Int
}

""""""
input EdibleFilter {
  """"""
  and: [EdibleFilter]

  """"""
  has: [EdibleHasFilter]

  """"""
  not: EdibleFilter

  """"""
  or: [EdibleFilter]
}

""""""
enum EdibleHasFilter {
  """"""
  isMortal
}

""""""
input EdiblePatch {
  """"""
  isMortal: Boolean
}

""""""
input FloatFilter {
  """"""
  between: FloatRange

  """"""
  eq: Float

  """"""
  ge: Float

  """"""
  gt: Float

  """"""
  in: [Float]

  """"""
  le: Float

  """"""
  lt: Float
}

""""""
input FloatRange {
  """"""
  max: Float!

  """"""
  min: Float!
}

""""""
interface Fruit {
  """"""
  name: String!
}

""""""
type FruitAggregateResult {
  """"""
  count: Int

  """"""
  nameMax: String

  """"""
  nameMin: String
}

""""""
input FruitFilter {
  """"""
  and: [FruitFilter]

  """"""
  has: [FruitHasFilter]

  """"""
  not: FruitFilter

  """"""
  or: [FruitFilter]
}

""""""
enum FruitHasFilter {
  """"""
  name
}

""""""
input FruitOrder {
  """"""
  asc: FruitOrderable

  """"""
  desc: FruitOrderable

  """"""
  then: FruitOrder
}

""""""
enum FruitOrderable {
  """"""
  name
}

""""""
input FruitPatch {
  """"""
  name: String
}

""""""
input GenerateMutationParams {
  """"""
  add: Boolean

  """"""
  delete: Boolean

  """"""
  update: Boolean
}

""""""
input GenerateQueryParams {
  """"""
  aggregate: Boolean

  """"""
  get: Boolean

  """"""
  password: Boolean

  """"""
  query: Boolean
}

""""""
enum HTTPMethod {
  """"""
  DELETE

  """"""
  GET

  """"""
  PATCH

  """"""
  POST

  """"""
  PUT
}

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

""""""
input Int64Filter {
  """"""
  between: Int64Range

  """"""
  eq: Int64

  """"""
  ge: Int64

  """"""
  gt: Int64

  """"""
  in: [Int64]

  """"""
  le: Int64

  """"""
  lt: Int64
}

""""""
input Int64Range {
  """"""
  max: Int64!

  """"""
  min: Int64!
}

""""""
input IntFilter {
  """"""
  between: IntRange

  """"""
  eq: Int

  """"""
  ge: Int

  """"""
  gt: Int

  """"""
  in: [Int]

  """"""
  le: Int

  """"""
  lt: Int
}

""""""
input IntRange {
  """"""
  max: Int!

  """"""
  min: Int!
}

""""""
input IntersectsFilter {
  """"""
  multiPolygon: MultiPolygonRef

  """"""
  polygon: PolygonRef
}

""""""
enum Mode {
  """"""
  BATCH

  """"""
  SINGLE
}

""""""
type MultiPolygon {
  """"""
  polygons: [Polygon!]!
}

""""""
input MultiPolygonRef {
  """"""
  polygons: [PolygonRef!]!
}

""""""
type Mutation {
  """"""
  addApple(input: [AddAppleInput!]!): AddApplePayload

  """"""
  addPear(input: [AddPearInput!]!): AddPearPayload

  """"""
  deleteApple(filter: AppleFilter!): DeleteApplePayload

  """"""
  deleteEdible(filter: EdibleFilter!): DeleteEdiblePayload

  """"""
  deleteFruit(filter: FruitFilter!): DeleteFruitPayload

  """"""
  deletePear(filter: PearFilter!): DeletePearPayload

  """"""
  updateApple(input: UpdateAppleInput!): UpdateApplePayload

  """"""
  updateEdible(input: UpdateEdibleInput!): UpdateEdiblePayload

  """"""
  updateFruit(input: UpdateFruitInput!): UpdateFruitPayload

  """"""
  updatePear(input: UpdatePearInput!): UpdatePearPayload
}

""""""
input NearFilter {
  """"""
  coordinate: PointRef!

  """"""
  distance: Float!
}

""""""
type Pear implements Fruit {
  """"""
  name: String!

  """"""
  weight: Int!
}

""""""
type PearAggregateResult {
  """"""
  count: Int

  """"""
  nameMax: String

  """"""
  nameMin: String

  """"""
  weightAvg: Float

  """"""
  weightMax: Int

  """"""
  weightMin: Int

  """"""
  weightSum: Int
}

""""""
input PearFilter {
  """"""
  and: [PearFilter]

  """"""
  has: [PearHasFilter]

  """"""
  not: PearFilter

  """"""
  or: [PearFilter]
}

""""""
enum PearHasFilter {
  """"""
  name

  """"""
  weight
}

""""""
input PearOrder {
  """"""
  asc: PearOrderable

  """"""
  desc: PearOrderable

  """"""
  then: PearOrder
}

""""""
enum PearOrderable {
  """"""
  name

  """"""
  weight
}

""""""
input PearPatch {
  """"""
  name: String

  """"""
  weight: Int
}

""""""
input PearRef {
  """"""
  name: String

  """"""
  weight: Int
}

""""""
type Point {
  """"""
  latitude: Float!

  """"""
  longitude: Float!
}

""""""
input PointGeoFilter {
  """"""
  near: NearFilter

  """"""
  within: WithinFilter
}

""""""
type PointList {
  """"""
  points: [Point!]!
}

""""""
input PointListRef {
  """"""
  points: [PointRef!]!
}

""""""
input PointRef {
  """"""
  latitude: Float!

  """"""
  longitude: Float!
}

""""""
type Polygon {
  """"""
  coordinates: [PointList!]!
}

""""""
input PolygonGeoFilter {
  """"""
  contains: ContainsFilter

  """"""
  intersects: IntersectsFilter

  """"""
  near: NearFilter

  """"""
  within: WithinFilter
}

""""""
input PolygonRef {
  """"""
  coordinates: [PointListRef!]!
}

""""""
type Query {
  """"""
  aggregateApple(filter: AppleFilter): AppleAggregateResult

  """"""
  aggregateEdible(filter: EdibleFilter): EdibleAggregateResult

  """"""
  aggregateFruit(filter: FruitFilter): FruitAggregateResult

  """"""
  aggregatePear(filter: PearFilter): PearAggregateResult

  """"""
  queryApple(filter: AppleFilter, first: Int, offset: Int, order: AppleOrder): [Apple]

  """"""
  queryEdible(filter: EdibleFilter, first: Int, offset: Int): [Edible]

  """"""
  queryFruit(filter: FruitFilter, first: Int, offset: Int, order: FruitOrder): [Fruit]

  """"""
  queryPear(filter: PearFilter, first: Int, offset: Int, order: PearOrder): [Pear]
}

""""""
input StringExactFilter {
  """"""
  between: StringRange

  """"""
  eq: String

  """"""
  ge: String

  """"""
  gt: String

  """"""
  in: [String]

  """"""
  le: String

  """"""
  lt: String
}

""""""
input StringFullTextFilter {
  """"""
  alloftext: String

  """"""
  anyoftext: String
}

""""""
input StringHashFilter {
  """"""
  eq: String

  """"""
  in: [String]
}

""""""
input StringRange {
  """"""
  max: String!

  """"""
  min: String!
}

""""""
input StringRegExpFilter {
  """"""
  regexp: String
}

""""""
input StringTermFilter {
  """"""
  allofterms: String

  """"""
  anyofterms: String
}

""""""
input UpdateAppleInput {
  """"""
  filter: AppleFilter!

  """"""
  remove: ApplePatch

  """"""
  set: ApplePatch
}

""""""
type UpdateApplePayload {
  """"""
  apple(filter: AppleFilter, first: Int, offset: Int, order: AppleOrder): [Apple]

  """"""
  numUids: Int
}

""""""
input UpdateEdibleInput {
  """"""
  filter: EdibleFilter!

  """"""
  remove: EdiblePatch

  """"""
  set: EdiblePatch
}

""""""
type UpdateEdiblePayload {
  """"""
  edible(filter: EdibleFilter, first: Int, offset: Int): [Edible]

  """"""
  numUids: Int
}

""""""
input UpdateFruitInput {
  """"""
  filter: FruitFilter!

  """"""
  remove: FruitPatch

  """"""
  set: FruitPatch
}

""""""
type UpdateFruitPayload {
  """"""
  fruit(filter: FruitFilter, first: Int, offset: Int, order: FruitOrder): [Fruit]

  """"""
  numUids: Int
}

""""""
input UpdatePearInput {
  """"""
  filter: PearFilter!

  """"""
  remove: PearPatch

  """"""
  set: PearPatch
}

""""""
type UpdatePearPayload {
  """"""
  numUids: Int

  """"""
  pear(filter: PearFilter, first: Int, offset: Int, order: PearOrder): [Pear]
}

""""""
input WithinFilter {
  """"""
  polygon: PolygonRef!
}